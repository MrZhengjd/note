java 的容器的锁，粒度都比较大，锁整个容器的，结合业务因此有了细粒度锁，借鉴concurrentHashMap的分段思想，先生成一定数量
的锁，具体使用的时候再根据key来返回对应的lock
private Integer segments = 16;//默认分段数量
    private final HashMap<Integer, ReentrantLock> lockMap = new HashMap<>();

    public SegmentLock() {
        init(null, false);
    }

    public SegmentLock(Integer counts, boolean fair) {
        init(counts, fair);
    }

    private void init(Integer counts, boolean fair) {
        if (counts != null) {
            segments = counts;
        }
        for (int i = 0; i < segments; i++) {
            lockMap.put(i, new ReentrantLock(fair));
        }
    }

    public void lock(T key) {
        ReentrantLock lock = lockMap.get(key.hashCode() % segments);
        lock.lock();
    }

    public void unlock(T key) {
        ReentrantLock lock = lockMap.get(key.hashCode() % segments);
        lock.unlock();
    }

在默认的时候先生成一定数量的锁，在获取锁的时候根据id的hashCode来获取锁，利用分段锁的思维